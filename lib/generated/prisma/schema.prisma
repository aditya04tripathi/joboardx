generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - base for all user types
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String?
  firstName    String
  lastName     String
  role         UserRole @default(CANDIDATE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // OAuth fields
  oauthProvider String?
  oauthId       String?

  // Relations
  profile       Profile?
  companies     Company[]
  jobs          Job[]          @relation("PostedBy")
  applications  Application[]
  resumes       Resume[]
  notifications Notification[]
  savedJobs     SavedJob[]

  @@unique([oauthProvider, oauthId])
}

enum UserRole {
  CANDIDATE
  EMPLOYER
  ADMIN
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  bio         String?  @db.Text
  phone       String?
  location    String?
  avatarUrl   String?
  website     String?
  linkedInUrl String?
  githubUrl   String?
  twitterUrl  String?
  skills      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id          String       @id @default(uuid())
  ownerId     String
  name        String
  description String?      @db.Text
  website     String?
  logoUrl     String?
  industry    String?
  size        CompanySize?
  location    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  owner User  @relation(fields: [ownerId], references: [id])
  jobs  Job[]
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

model Job {
  id               String          @id @default(uuid())
  companyId        String
  postedById       String
  title            String
  description      String          @db.Text
  requirements     String?         @db.Text
  responsibilities String?         @db.Text
  location         String?
  salaryMin        Decimal?        @db.Decimal(10, 2)
  salaryMax        Decimal?        @db.Decimal(10, 2)
  type             JobType
  experienceLevel  ExperienceLevel
  status           JobStatus       @default(DRAFT)
  viewsCount       Int             @default(0)
  applyUrl         String?
  isRemote         Boolean         @default(false)
  expiresAt        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  postedBy     User          @relation("PostedBy", fields: [postedById], references: [id])
  applications Application[]
  jobSkills    JobSkill[]
  savedBy      SavedJob[]
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  EXECUTIVE
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

model JobSkill {
  id    String @id @default(uuid())
  jobId String
  skill String

  // Relations
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, skill])
}

model Application {
  id          String            @id @default(uuid())
  jobId       String
  candidateId String
  resumeId    String?
  coverLetter String?           @db.Text
  status      ApplicationStatus @default(SUBMITTED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate User    @relation(fields: [candidateId], references: [id])
  resume    Resume? @relation(fields: [resumeId], references: [id])
}

enum ApplicationStatus {
  SUBMITTED
  REVIEWING
  REJECTED
  INTERVIEW
  ACCEPTED
}

model Resume {
  id        String   @id @default(uuid())
  userId    String
  title     String
  fileUrl   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  applications Application[]
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  content   String           @db.Text
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  APPLICATION
  MESSAGE
  STATUS_CHANGE
  JOB_ALERT
  SYSTEM
}

model SavedJob {
  id        String   @id @default(uuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}
